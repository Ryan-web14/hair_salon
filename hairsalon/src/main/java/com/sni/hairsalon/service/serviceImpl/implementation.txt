@RestController
@RequestMapping("/api/me")
public class ProfileController {

   private final ClientService clientService;
   private final BarberService barberService;

   @GetMapping
   public ResponseEntity<?> getMyProfile(@AuthenticationPrincipal UserPrincipal userPrincipal) {
       String email = userPrincipal.getUsername();
       String role = userPrincipal.getAuthorities().iterator().next().getAuthority();

       if (role.equals("ROLE_CLIENT")) {
           return ResponseEntity.ok(clientService.getClientProfile(email));
       } else if (role.equals("ROLE_BARBER")) {
           return ResponseEntity.ok(barberService.getBarberProfile(email));
       }
       
       throw new UnauthorizedException("Invalid role");
   }

   @GetMapping("/appointments")
   public ResponseEntity<List<AppointmentResponseDTO>> getMyAppointments(
           @AuthenticationPrincipal UserPrincipal userPrincipal,
           @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {
       
       String email = userPrincipal.getUsername();
       String role = userPrincipal.getAuthorities().iterator().next().getAuthority();

       if (role.equals("ROLE_CLIENT")) {
           return ResponseEntity.ok(clientService.getClientAppointments(email, date));
       } else if (role.equals("ROLE_BARBER")) {
           return ResponseEntity.ok(barberService.getBarberAppointments(email, date));
       }
       
       throw new UnauthorizedException("Invalid role");
   }
}

@RestController
@RequestMapping("/api/me")
public class ProfileController {

   private final ClientService clientService;
   private final BarberService barberService;

   @GetMapping
   public ResponseEntity<?> getMyProfile(@AuthenticationPrincipal UserPrincipal userPrincipal) {
       String email = userPrincipal.getUsername();
       String role = userPrincipal.getAuthorities().iterator().next().getAuthority();

       if (role.equals("ROLE_CLIENT")) {
           return ResponseEntity.ok(clientService.getClientProfile(email));
       } else if (role.equals("ROLE_BARBER")) {
           return ResponseEntity.ok(barberService.getBarberProfile(email));
       }
       
       throw new UnauthorizedException("Invalid role");
   }

   @GetMapping("/appointments")
   public ResponseEntity<List<AppointmentResponseDTO>> getMyAppointments(
           @AuthenticationPrincipal UserPrincipal userPrincipal,
           @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {
       
       String email = userPrincipal.getUsername();
       String role = userPrincipal.getAuthorities().iterator().next().getAuthority();

       if (role.equals("ROLE_CLIENT")) {
           return ResponseEntity.ok(clientService.getClientAppointments(email, date));
       } else if (role.equals("ROLE_BARBER")) {
           return ResponseEntity.ok(barberService.getBarberAppointments(email, date));
       }
       
       throw new UnauthorizedException("Invalid role");
   }
}